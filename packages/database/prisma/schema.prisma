// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id          String    @id @default(uuid())
  bio         String?
  developer   Developer @relation(fields: [developerId], references: [id])
  developerId String    @unique
}

model Developer {
  id      String   @id @default(uuid())
  email   String   @unique
  name    String?
  profile Profile?
}

model Repository {
  id          String       @id @default(uuid())
  repoId      Int
  name        String
  owner       String
  url         String
  folder      String
  createdAt   DateTime     @default(now())
  deployments Deployment[]
  userId      String
  createdBy   User         @relation(fields: [userId], references: [id])
  provider    String
}

model Deployment {
  id         String     @id @default(uuid())
  createdAt  DateTime   @default(now())
  repoId     String
  duration   BigInt
  branch     String
  status     String
  repository Repository @relation(fields: [repoId], references: [id])
}

model User {
  id            String          @id @default(uuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  repositories  Repository[]
  Authenticator Authenticator[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  id                   String  @id @default(uuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
